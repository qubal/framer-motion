{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rows","columns","boxSize","length","transition","duration","loop","Infinity","ease","Matrix","x","useMotionValue","y","containerRef","useRef","animation","useAnimation","loopAnimation","start","rotate","stopAnimation","stop","restartAnimation","a","useEffect","style","styles","page","onMouseEnter","onMouseLeave","onMouseMove","event","set","pageX","current","getBoundingClientRect","pageY","container","ref","map","row","rowIndex","column","columnIndex","key","div","magnet","border","scale","animate","Box","top","left","angle","borderRadius","background","updateProps","updatedAngle","cursorTop","cursorLeft","Math","atan2","PI","calcAngle","get","proximity","max","abs","newColor","transform","newScale","newBorderRadius","unsubscribeX","onChange","unsubscribeY","position","width","height","display","alignItems","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.740e9986.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { motion, useMotionValue, transform, useAnimation } from \"framer-motion\";\nimport \"./App.css\";\n\nconst containerSize = 400;\nconst rows = [0, 1, 2, 3, 4, 5];\nconst columns = rows;\nconst boxSize = containerSize / rows.length;\nconst transition = { duration: 3, loop: Infinity, ease: \"easeOut\" };\n\nexport function Matrix() {\n  const x = useMotionValue(-boxSize);\n  const y = useMotionValue(-boxSize);\n  const containerRef = useRef(null);\n  const animation = useAnimation();\n\n  const loopAnimation = () =>\n    animation.start({\n      x: [-boxSize, containerSize, containerSize, -boxSize, -boxSize],\n      y: [-boxSize, -boxSize, containerSize, containerSize, -boxSize],\n      rotate: [0, 0, 90, 90, 180, 180, 270, 270, 360],\n      transition,\n    });\n\n  const stopAnimation = () => animation.stop();\n\n  const restartAnimation = async () => {\n    await animation.start({\n      x: -boxSize,\n      y: -boxSize,\n      rotate: 0,\n    });\n    await loopAnimation();\n  };\n\n  const handleMouseMove = (event) => {\n    x.set(\n      event.pageX - containerRef.current.getBoundingClientRect().x - boxSize / 2\n    );\n    y.set(\n      event.pageY - containerRef.current.getBoundingClientRect().y - boxSize / 2\n    );\n  };\n\n  useEffect(() => {\n    loopAnimation();\n    return () => stopAnimation();\n  }, [loopAnimation, stopAnimation]);\n\n  return (\n    <div\n      style={styles.page}\n      onMouseEnter={stopAnimation}\n      onMouseLeave={restartAnimation}\n      onMouseMove={handleMouseMove}\n    >\n      <div style={styles.container} ref={containerRef}>\n        {rows.map((row, rowIndex) =>\n          columns.map((column, columnIndex) => (\n            <Box\n              x={x}\n              y={y}\n              row={rowIndex}\n              column={columnIndex}\n              key={`${row}${column}`}\n            />\n          ))\n        )}\n        <motion.div\n          style={{\n            ...styles.magnet,\n            x,\n            y,\n            border: \"6px solid #FFF\",\n            scale: 0.5,\n          }}\n          animate={animation}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst Box = ({ x, y, row, column }) => {\n  const top = column * boxSize;\n  const left = row * boxSize;\n\n  const angle = useMotionValue(0);\n  const scale = useMotionValue(0);\n  const borderRadius = useMotionValue(0);\n  const background = useMotionValue(\"\");\n\n  useEffect(() => {\n    function updateProps() {\n      const updatedAngle = calcAngle(top, left, x.get(), y.get());\n      angle.set(updatedAngle);\n\n      const proximity = Math.max(\n        Math.abs(left - x.get()),\n        Math.abs(top - y.get())\n      );\n      const newColor = transform(\n        proximity,\n        [0, containerSize - boxSize],\n        [\"#F00\", \"#60F\"]\n      );\n      const newScale = transform(\n        proximity,\n        [0, containerSize - boxSize],\n        [0.8, 0.5]\n      );\n      const newBorderRadius = transform(\n        proximity,\n        [0, containerSize - boxSize],\n        [boxSize * 0.11, boxSize * 0.33]\n      );\n      background.set(newColor);\n      scale.set(newScale);\n      borderRadius.set(newBorderRadius);\n    }\n\n    const unsubscribeX = x.onChange(updateProps);\n    const unsubscribeY = y.onChange(updateProps);\n\n    return () => {\n      unsubscribeX();\n      unsubscribeY();\n    };\n  }, []);\n\n  return (\n    <motion.div\n      style={{\n        ...styles.Box,\n        position: \"absolute\",\n        top,\n        left,\n        background,\n        scale,\n        borderRadius,\n      }}\n      rotate={angle}\n    />\n  );\n};\n\nfunction calcAngle(top, left, cursorTop, cursorLeft) {\n  let angle = Math.atan2(cursorTop - left, cursorLeft - top) * (180 / Math.PI);\n  return angle < 0 ? -(angle + 540) : -(angle + 180);\n}\n\nconst styles = {\n  page: {\n    width: \"100vw\",\n    height: \"100vh\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n  },\n  container: {\n    position: \"relative\",\n    width: containerSize,\n    height: containerSize,\n  },\n  Box: {\n    height: boxSize,\n    width: boxSize,\n  },\n  magnet: {\n    height: boxSize,\n    width: boxSize,\n    borderRadius: boxSize * 0.33,\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Matrix } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Matrix />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}